
추상 클래스(Abstract Class)
Class 선언 시 abstract으로 선언된 클래스
추상 메소드를 하나라도 가지고 있는 클래스
instance로 생성할 수 없다
-다형성의 강제화-

추상 클래스 생성 방법
1)자식 클래스를 통해 생성하는 방법
2)static 멤버로 생성하는 방법

싱글톤 - 각 하나의 객체만 만들게 하는것
*싱글톤을 위해서는
1.new 연산자 사용 불가
2.private 붙여주기
외부에서 객체를 읽는 유일한 방법은 getInstance()를 호출하는 방법
getInstance()는 최초에 할당된 하나의 메모리를 계속 쓰는 방식이다.

추상적 메소드(Abstract Method)
메소드의 선언부만 있고, 구현부(body)가 없는 메소드
메소드 리턴타입 앞에 abstract 키워드를 통해 컴파일러에게 바디가 없는 메소드라고 선언
부모 클래스에서 선언된 메소드가 자식 클래스에서 정의할 수 있도록 만든 메소드
Override의 강제화를 위한 메소드
만일 클래스에 한 개 이상의 추상 메소드를 가시면 그 클래스는 반드시 추상 클래스가 되어야 한다.
-추후 자식에서 강제적으로 재정의하게 하기 위해 선언만 하는 메소드

static 지역에서는 this, super 사용 불가(우리 집 안에 있지 않기 때문에)


인터페이스
- 자바에서 객체의 사용 방법을 정의해둔 타입 
- interface는 추상 메소드와 static 상수로만 이루어진다
1. public static final이 생략된 변수와 public abstract가 생략된 메소드만 가진다
2. 이종상속일 경우 implements(구현한다) 사용
ex) 부모가 class인데 자식이 Interface인 경우
3. interface는 instance화 할 수 없다 (new 사용 불가) 100% 추상화된 객체이기 때문에
4. interface끼리의 동종상속은 extends를 사용한다. 그리고 다중 상속이 가능
5. 다중 상속이 가능하기 때문에 모든 메소드를 재정의해야 한다
6. interface의 참조 주소는 해당 interface의 재정의된 메소드만 접근 가능
7. interface 배열에는 해당 interface의 자식 클래스를 넣을 수 있다
8. interface 상속을 받아서 기능을 더 확장시킬 수 있다


인터페이스의 목적
- 다중 상속을 하기 위해 사용





